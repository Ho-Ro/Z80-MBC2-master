	title 'bank & move module for CP/M3 linked BIOS'
	.z80
;
;	Converted to Z80 mnemonics via XIZ by Tony Nicholson
;	and added XMOVE capability (to allow programs like
;	BOOTSYS to load a replacement system image under a
;	running banked system into the correct memory banks).
;
;	Added debugging to output console messages when both
;	XMOVE and MOVE are called.  16-Mar-2021
;
;	Assemble using Microsoft M80 or Hector Peraza's ZSM4
;
;******************************************************************************
;
; MOVE.ASM - S290918
; CP/M 3.0 BANK & MOVE BIOS MODULE FOR THE Z80-MBC2 (HW ref. A040618)
;
; Required IOS S220718-R190918 (or newer revisions until otherwise stated)
;
;
;******************************************************************************
	
				; DEFINE LOGICAL VALUES
true	equ	-1
false	equ	not true

				; DETERMINE IF FOR BANK SELECT OR NOT
banked	equ	true		; <------ BANKED/NON-BANKED SWITCH

	include	config.lib	;AGN - for debugging

				; LOCATE CODE IN THE COMMON SEGMENT:
				; --------------------------
	cseg
				; --------------------------

				; DEFINE PUBLIC LABELS
	public ?move,?xmove,?bank
	
				; EXTERNALLY DEFINED ENTRY POINTS AND LABELS
	extrn @cbnk

  if banked
	extrn ?bnksl
  endif

  if DBG			;AGN - for debugging
	extrn	?pmsg, ?phex
  endif

; -----------------------------------------------------------------------------
;
; Z80-MBC2 IOS equates
;
; -----------------------------------------------------------------------------

exc$wr$opcd equ	000h		; Address of the EXECUTE WRITE OPCODE write port
exc$rd$opcd equ	000h		; Address of the EXECUTE READ OPCODE read port
sto$opcd equ	001h		; Address of the STORE OPCODE write port
serial$rx equ	001h		; Address of the SERIAL RX read port
sertx$opc equ	001h		; SERIAL TX opcode
seldisk$opc equ	009h		; SELDISK opcode
seltrck$opc equ	00ah		; SELTRACK opcode
selsect$opc equ	00bh		; SELSECT opcode
wrtsect$opc equ	00ch		; WRITESECT opcode
setbank$opc equ	00dh		; SETBANK opcode
sysflag$opc equ	083h		; SYSFLAG opcode
datetim$opc equ	084h		; DATETIME opcode
errdsk$opc equ	085h		; ERRDISK opcode
rdsect$opc equ	086h		; READSECT opcode
sdmount$opc equ	087h		; SDMOUNT opcode


				; ROUTINE SETS UP AN INTER-BANK MOVE OF 128 BYTES ON THE NEXT CALL
				;  TO ?MOVE
?xmove:
  if banked
	ld	a,0FFh		; Set extended move flag
	ld	(xmov$flag),a
	ld	(xmov$src),bc	; Save destination (B) and source (C) banks
    if DBG
	ld	(dbgstk),sp	; Swap to stack in common memory
	ld	sp,dbgstk
	push	hl		; output "XMOVE(src,dst)" to console
	ld	hl,xmove$msg
	call	?pmsg		; ?pmsg saves BC and DE
	ld	a,c		; source bank
	call	?phex
	call	?pmsg
	ld	a,b		; dest bank
	call	?phex
	call	?pmsg
	pop	hl
	ld	sp,(dbgstk)
    endif
	ret

xmov$flag: defb	0		; Non-zero for extended move
xmov$src: defb	0		; Source bank
xmov$dst: defb	0		; Destination
xmov$buf: defs	128		; 128 byte bounce buffer
  else
	ret
  endif

	
				; ROUTINE PERFORMS INTRA-BANK MOVES IF ?XMOVE WAS NOT CALLED PRIOR TO
				;  THIS CALL TO ?MOVE ELSE A 128 BYTE TRANSFER IS CONDUCTED BETWEEN
				;  DIFFERENT BANKS
?move:
  if banked
    if DBG
	ld	(dbgstk),sp	; Swap to stack in common memory
	ld	sp,dbgstk
	push	hl		; output "MOVE(len,src,dst)" to console
	ld	hl,move$msg
	call	?pmsg
	ld	a,b		; length
	call	?phex
	ld	a,c
	call	?phex
	call	?pmsg
	ld	a,d		; source
	call	?phex
	ld	a,e
	call	?phex
	ld	hl,comma$msg
	call	?pmsg
	ex	(sp),hl		; dest
	ld	a,h
	call	?phex
	ld	a,l
	call	?phex
	ex	(sp),hl
	call	?pmsg
	pop	hl
	ld	sp,(dbgstk)
    endif
	ld	a,(xmov$flag)	; is this an extended memory move?
	or	a
	jr	z,mover		; no
	xor	a		; yes, reset flag
	ld	(xmov$flag),a
	ld	(cmnstk),sp	; Swap to stack in common memory
	ld	sp,cmnstk
	ld	a,(@cbnk)	; Get and save current bank
	push	af
	ex	de,hl		; Swap registers for Z80 block move
	push	hl		; Save source pointer
	push	de		;  destination pointer
	push	bc		;  and byte count
	ld	de,xmov$buf	; Point to common memory buffer
	ld	a,(xmov$src)	; Select source bank
	call	?bnksl
	ldir			; Copy to common memory
	pop	bc
	pop	de
	ex	(sp),hl
	ld	hl,xmov$buf
	ld	a,(xmov$dst)
	call	?bnksl
	ldir			; Copy to destination
	pop	hl
	ex	de,hl
	pop	af
	call	?bnksl		; Restore saved bank
	ld	sp,(cmnstk)	;  and stack pointer
	ret			; Return
mover:
  endif
	ex	de,hl		; we are passed source in DE and dest in HL
	ldir			; use Z80 block move instruction
	ex	de,hl		; need next addresses in same regs
	ret

	
				; ROUTINE SWITCHES IN PHYSICAL BANK.
				; ?BANK is called with the bank address in register A. This bank address ha
				; stored in @CBNK for future reference. All registers except A must be main
?bank:
  if	banked
	push	af		; Save requested bank
	ld	a, setbank$opc	; Select the SETBANK opcode
	out	(sto$opcd),a
	pop	af		; A = bank number [0..2]
	out	(exc$wr$opcd),a	; Select it
  endif
	ret

  if banked
	cseg
	defs	24		; 12-level stack in common
cmnstk:	defs	2

    if DBG
	defs	24		; debugging stack in common
dbgstk:	defs	2

cr	equ	13
lf	equ	10

xmove$msg:
	defb	cr,lf,'X'
move$msg:
	defb	'MOVE(',0
comma$msg:
	defb	',',0
	defb	')',cr,lf,0
    endif

  endif

	end
