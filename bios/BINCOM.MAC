	title	BINCOM - Binary file comparison
	.z80
;	Converted to Z80 mnemonics via XIZ by Tony Nicholson
;	Assemble using Microsoft M80 or Hector Peraza's ZSM4
;
;	--------------------------------------------------------
;	BINCOM.COM is a program which can be used to compare
;	two files, which will probably be binary, to find the
;	differences between them. The files are compared byte
;	for byte. No attempt is made to vary the match points
;	to establish a different synchronization if a prolonged
;	mismatch is found, as would be done for ASCII files.
;	The command line is:
;
;	      BINCOM [X:]FILE1.COM,[Y:]FILE2.COM
;
;	Discrepancies will be noted at the console in a line
;	of the form
;			XXXX YY ZZ
;	where XXXX is the number of the discrepant byte, YY in
;	FILE1 but ZZ in FILE2. Pressing any key at the console
;	will stop the comparison, but in any event there will
;	be a final total shown of the bytes compared and the
;	number of mismatches encountered.
;
;		    BINCOM .ASM Copyright (C) 1983
;		    Universidad Autonoma de Puebla
;			  September 16, 1983
;
;	[Harold V. McIntosh, 16 September 1983]
;	--------------------------------------------------------


lf	equ	0ah		; Line feed
cr	equ	0dh		; Carriage return

bdos	equ	0005h		; Jump to BDOS
tfcb	equ	005ch		; DDT's file control block
tsiz	equ	0080h		; Size of record buffer

;	-------------
;	org	0100h
;	-------------

begn:	ld	hl,0000
	add	hl,sp
	ld	(stak),hl
	ld	sp,stak
	ld	hl,logo		; "BINCOM/UAP"
	call	mssg
	ld	a,(tfcb+1)	; File name
	cp	' '
	jp	z,tuto
	call	setup

	ld	c,15		; (0F) open file
	ld	de,fcb1
	call	bdos
	inc	a
	jp	z,err1
	ld	c,15		; (0F) open file
	ld	de,fcb2
	call	bdos
	inc	a
	jp	z,err2

	xor	a
	ld	(fcb1+32),a
	ld	(fcb2+32),a
	ld	(byct),a
	ld	(neql),a
	inc	a
	ld	(rect),a
	ld	a,4
	ld	(clmn),a

	ld	hl,0000
	ld	(erct),hl

	ld	bc,0000

loop:	ld	a,(byct)
	and	07fh
	jp	nz,rnb		; Bytes in the buffer
	ld	a,(rect)
	dec	a
	jp	nz,rna
	push	bc

	ld	bc,0008h	; Eight-sector buffer
	ld	de,buf1
	ld	hl,fcb1
	call	filb

	push	bc
	ld	bc,0008h	; Eight-sector buffer
	ld	de,buf2
	ld	hl,fcb2
	call	filb

	pop	af
	cp	b
	jp	z,eql
	ld	hl,neql
	jp	c,neq
	ld	a,b
	ld	(hl),'2'
	jp	eql
neq:	ld	(hl),'1'
eql:	pop	bc
	cp	00
	jp	z,enfi		; End of record
	ld	de,buf1
	ld	hl,buf2
rna:	ld	(rect),a
	ld	a,80h
rnb:	dec	a		; Read next pair of bytes
	ld	(byct),a
	ld	a,(de)
	cp	(hl)
	call	nz,rprt		; Report discrepancy
	call	recs
	jp	nz,quit
	inc	bc
	inc	de
	inc	hl
	jp	loop

;	Type summary message at the end of the run.

quit:	call	crlf
	ld	hl,me3
	call	mssg
enfi:	push	bc
	call	crlf
	ld	hl,me1
	call	mssg
	pop	hl
	call	word
	ld	a,'H'
	call	aout
	call	crlf
	ld	hl,me2
	call	mssg
	ld	hl,(erct)
	call	word
	ld	a,'H'
	call	aout
	call	crlf
	ld	a,(neql)
	or	a
	jp	z,gbye
	ld	hl,fcb1+1
	cp	'1'
	jp	z,enf
	ld	hl,fcb2+1
enf:	call	mssg
	ld	hl,me4
	call	mssg
gbye:	ld	hl,(stak)
	ld	sp,hl
	ret

setup:	ld	b,16
	ld	de,tfcb
	ld	hl,fcb1
	call	moov

	ld	hl,me5
	call	mssg
	ld	hl,fcb1+1
	call	mssg
	call	crlf

	ld	b,16
	ld	de,tfcb+16
	ld	hl,fcb2
	call	moov

	ld	hl,me6
	call	mssg
	ld	hl,fcb2+1
	call	mssg
	call	crlf
	jp	crlf

moov:	ld	a,(de)
	ld	(hl),a
	inc	de
	inc	hl
	dec	b
	jp	nz,moov
	ld	de,-7
	add	hl,de
	ld	a,(hl)
	cp	' '
	ret	nz
	ld	(hl),'C'
	inc	hl
	ld	(hl),'O'
	inc	hl
	ld	(hl),'M'
	ret

;	Fill buffer DE using FCB HL. On return, B = # sectors read.

filb:	push	bc
	push	de
	push	hl
	ld	c,26		; (1A) set DMA address
	call	bdos
	pop	de
	push	de
	ld	c,20		; (14) read one record
	call	bdos
	pop	de
	pop	hl
	ld	bc,tsiz
	add	hl,bc
	ex	de,hl
	pop	bc
	cp	00
	jp	nz,fic
	inc	b
	dec	c
	jp	nz,filb
	ret
fic:	cp	01
	ret	z
	ret

;	Type CR,LF.

crlf:	ld	a,cr
	call	aout		; A to console
	ld	a,lf
	jp	aout		; A to console

;	Type one, two, or four spaces.

quad:	call	dubl
dubl:	call	sngl
sngl:	ld	a,' '

;	A to console

aout:	push	hl
	push	de
	push	bc
	ld	e,a
	ld	c,02		; (02) A to console
	call	bdos
	pop	bc
	pop	de
	pop	hl
	ret

;	Read console status: nz/z = char waiting/not.

recs:	push	bc
	push	de
	push	hl
	ld	c,11		; (0B) read console status
	call	bdos
	and	01
	push	af
	jp	z,rcs
	ld	c,1		; (01) read console
	call	bdos
rcs:	pop	af
	pop	hl
	pop	de
	pop	bc
	ret

;	Type A as two nibbles

word:	ld	a,h
	call	byte
	ld	a,l
byte:	push	af
	rra
	rra
	rra
	rra
	call	nybl
	pop	af
nybl:	and	0fh
	add	a,90h
	daa
	adc	a,40h
	daa
	jp	aout		; A to console

;	Type discrepancy report.

rprt:	push	hl
	push	bc
	ld	hl,(erct)
	inc	hl
	ld	(erct),hl
	pop	hl
	call	word
	call	dubl
	pop	hl
	ld	a,(hl)
	call	byte
	call	sngl
	ld	a,(de)
	call	byte
	call	sngl
	call	quad
	ld	a,(clmn)
	dec	a
	jp	nz,rpr
	call	crlf
	ld	a,4
rpr:	ld	(clmn),a
	ret

;	Message terminated by zero to console

mssg:	ld	a,(hl)
	or	a
	ret	z
	call	aout		; A to console
	inc	hl
	jp	mssg

err1:	ld	hl,er1
	jp	cmss

err2:	ld	hl,er2
	jp	cmss

tuto:	ld	hl,scrp
cmss:	call	mssg
	jp	gbye

;	---------------------------------------------------------

logo:	defb	'BINCOM - Binary Compare',cr,lf,cr,lf,00

;logo:	defb	'         BINCOM/ICUAP',cr,lf
;	defb	'Universidad Autonoma de Puebla',cr,lf
;	defb	'      September 16, 1983',cr,lf,cr,lf,00

er1:	defb	'Cannot open first file.',00
er2:	defb	'Cannot open second file.',00
me1:	defb	'Number of bytes compared:   ',00
me2:	defb	'Number of mismatches found: ',00
me3:	defb	'Comparison interrupted...',00
me4:	defb	' was shorter.',cr,lf,00
me5:	defb	'File 1:  ',00
me6:	defb	'File 2:  ',00
scrp:	defb	'BINCOM.COM is a program which can be used to compare',cr,lf
	defb	'two files, which will probably be binary, to find the',cr,lf
	defb	'differences between them. The files are compared byte',cr,lf
	defb	'for byte. No attempt is made to vary the match points',cr,lf
	defb	'to establish a different synchronization if a prolonged',cr,lf
	defb	'mismatch is found, as would be done for ASCII files.',cr,lf
	defb	'The command line is:',cr,lf,cr,lf
	defb	'      BINCOM [X:]FILE1.COM,[Y:]FILE2.COM',cr,lf,cr,lf
	defb	'Discrepancies will be noted in the form',cr,lf,cr,lf
	defb	'  XXXX YY ZZ',cr,lf,cr,lf
	defb	'where XXXX is the discrepant byte, YY in FILE1 but ZZ',cr,lf
	defb	'in FILE2. Use any key to halt the comparison. Final',cr,lf
	defb	'totals - of bytes compared and mismatches found - will',cr,lf
	defb	'always be shown.',cr,lf
	defb	00

	defs	20
stak:	defs	2
fcb1:	defs	33
fcb2:	defs	33
byct:	defs	1		; Byte count
rect:	defs	1		; Record count
erct:	defs	2
neql:	defs	1		; FF=different file lengths
clmn:	defs	1		; Coumn counter
borg:	defs	2
buf1:	defs	400h		; Eight-sector buffer
buf2:	defs	400h		; Eight-sector buffer

	end
